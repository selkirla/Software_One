import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert multiple XML RSS (version 2.0) feeds from an XML file
 * containing a list of URLS into the corresponding HTML output file along with
 * an HTML index page.
 *
 * @author Selin Kirbas
 *
 */
public final class RSSAggregator {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSAggregator() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head>
     * <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
        + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        //get index of title
        int titleIndex = getChildElement(channel, "title");

        //get index of description
        int descIndex = getChildElement(channel, "description");

        //get index of link
        int linkIndex = getChildElement(channel, "link");

        //print opening tags
        out.println("<html>");
        out.println("<head>");
        out.println("<title>");

        //check if title is blank
        if (!(channel.child(titleIndex).numberOfChildren() == 0)) {
            out.println(channel.child(titleIndex).child(0).label());
        } else {
            out.println("No title available");
        }
        out.println("</title>");
        out.println("</head>");
        out.println("<body>");
        if (!(channel.child(titleIndex).numberOfChildren() == 0)) {
            out.println(" <h1><a href=\""
                    + channel.child(linkIndex).child(0).label() + "\">"
                    + channel.child(titleIndex).child(0).label() + "</a></h1>");
        } else {
            out.println(" <h1><a href=\""
                    + channel.child(linkIndex).child(0).label()
                    + "\">No title available</a></h1>");
        }
        //check if description is blank
        if (!(channel.child(descIndex).numberOfChildren() == 0)) {
            out.println(" <p>" + channel.child(descIndex).child(0).label()
                    + "</p>");
        } else {
            out.println(" <p>No description</p>");
        }
        //print rest of opening tags
        out.println("<table border=\"1\">");
        out.println("<tr>");
        out.println("<th>Date</th>");
        out.println("<th>Source</th>");
        out.println("<th>News</th>");
        out.println("</tr>");
    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body>
     * </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        //print closing tags
        out.println("</table>");
        out.println("</body>");
        out.println("</html>");
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        int i = 0, index = -1;

        //find first child of each tag
        while (i < xml.numberOfChildren() && index != 0) {
            if (xml.child(i).label().equals(tag)) {
                index = i;
            }
            i++;
        }
        return index;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
        + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        //create tag variables
        String title = "";
        String link = "";
        String srcLink = "";
        String date = "";
        String src = "";

        //find index of publication date
        int pubIndex = getChildElement(item, "pubDate");

        //find index of source
        int srcIndex = getChildElement(item, "source");

        //find index of title
        int titleIndex = getChildElement(item, "title");

        //find index of link
        int linkIndex = getChildElement(item, "link");

        //check if publication date is present
        if (pubIndex != -1) {
            //check if date is blank
            if (item.child(pubIndex).numberOfChildren() != 0) {
                date = item.child(pubIndex).child(0).label();
            } else {
                date = "No date available";
            }
        }
        //check if source is present
        if (srcIndex != -1) {
            //check if source is blank
            if (item.child(srcIndex).numberOfChildren() != 0) {
                src = item.child(srcIndex).child(0).label();

                srcLink = item.child(srcIndex).attributeValue("url");
            } else {
                src = "No source available";
            }
        }

        //check if title is present
        if (titleIndex != -1) {
            //check if title is blank
            if (item.child(titleIndex).numberOfChildren() != 0) {
                title = item.child(titleIndex).child(0).label();
            } else {
                title = "No title available";
            }
        }

        //check if link is present
        if (linkIndex != -1) {
            //check if link is blank
            if (item.child(linkIndex).numberOfChildren() != 0) {
                link = item.child(linkIndex).child(0).label();

                //check if source link is blank
                if (srcLink.length() != 0) {
                    //link & source link are present
                    out.println("<tr>");
                    out.println("<td>" + date + "</td>");
                    out.println("<td>" + "<a href=\"" + srcLink + "\">" + src
                            + "</a>" + "</td>");
                    out.println("<td>" + "<a href=\"" + link + "\">" + title
                            + "</a>" + "</td>");
                    out.println("</tr>");
                } else { //link is present
                    out.println("<tr>");
                    out.println("<td>" + date + "</td>");
                    out.println("<td>" + src + "</td>");
                    out.println("<td>" + "<a href=\"" + link + "\">" + title
                            + "</a>" + "</td>");
                    out.println("</tr>");
                }
            } else {
                if (srcLink.length() != 0) { //check if source link is blank
                    //source link is present
                    out.println("<tr>");
                    out.println("<td>" + date + "</td>");
                    out.println("<td>" + "<a href=\"" + srcLink + "\">" + src
                            + "</a>" + "</td>");
                    out.println("<td>" + title + "</td>");
                    out.println("</tr>");
                } else { //link & source link are not present
                    out.println("<tr>");
                    out.println("<td>" + date + "</td>");
                    out.println("<td>" + src + "</td>");
                    out.println("<td>" + title + "</td>");
                    out.println("</tr>");
                }

            }
        }

    }

    /**
     * Processes one XML RSS (version 2.0) feed from a given URL converting it
     * into the corresponding HTML output file.
     *
     * @param url
     *            the URL of the RSS feed
     * @param file
     *            the name of the HTML output file
     * @param out
     *            the output stream to report progress or errors
     * @updates out.content
     * @requires out.is_open
     * @ensures <pre>
     * [reads RSS feed from url, saves HTML document with table of news items
     *   to file, appends to out.content any needed messages]
     * </pre>
     */
    private static void processFeed(String url, String file, SimpleWriter out) {
        XMLTree xml = new XMLTree1(url);

        //check if attribute value of version is 2.0
        if (xml.attributeValue("version").equals("2.0")) {
            XMLTree channel = xml.child(0);

            SimpleWriter outputFile = new SimpleWriter1L(file);

            outputHeader(channel, outputFile);

            for (int i = 0; i < channel.numberOfChildren(); i++) {
                if (channel.child(i).label().equals("item")) {
                    processItem(channel.child(i), outputFile);
                }
            }

            outputFooter(outputFile);

            outputFile.close();

        } else {
            out.println("Please make sure the URL is of an RSS 2.0 feed!");
        }
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        //prompt user for XML file with multiple RSS 2.0 feeds
        out.println(
                "Please enter the name of an XML file with a list of RSS 2.0 feeds.");
        String url = in.nextLine();
        XMLTree xmlList = new XMLTree1(url);

        //prompt user for name of HTML file
        out.println(
                "Please enter the name of an output file inlcuding the .html extension.");
        String file = in.nextLine();
        SimpleWriter outputFile = new SimpleWriter1L(file);

        //create HTML pages from given XML for each feed
        for (int i = 0; i < xmlList.numberOfChildren(); i++) {
            String fileVal = xmlList.child(i).attributeValue("file");
            String urlVal = xmlList.child(i).attributeValue("url");
            processFeed(urlVal, fileVal, out);
        }

        String title = xmlList.attributeValue("title");

        //print HTML tags
        outputFile.println("<html>");
        outputFile.println("<head>");
        outputFile.println("<title>" + title + "</title>");
        outputFile.println("</head>");
        outputFile.println("<body>");
        outputFile.println("<head>");
        outputFile.println("<h1>" + title + "</h1>");
        outputFile.println("</head>");
        outputFile.println("<ul>");

        for (int n = 0; n < xmlList.numberOfChildren(); n++) {
            String name = xmlList.child(n).attributeValue("name");
            String fileVal = xmlList.child(n).attributeValue("file");
            outputFile.println("<li>");
            outputFile.println("<p>");
            outputFile.println("<a href=" + "\"" + fileVal + "\">" + name + "</a>");
            outputFile.println("</p>");
            outputFile.println("</li>");
        }

        //print closing tags
        outputFile.println("</ul>");
        outputFile.println("</body>");
        outputFile.println("</html>");

        //print message to indicate file was successfully created
        out.print("File created. End of program.");

        outputFile.close();
        in.close();
        out.close();
    }

}
